https://www.digitalocean.com/community/tutorials/how-to-structure-a-large-flask-application-with-flask-blueprints-and-flask-sqlalchemy

mkdir organized_flask_app
cd organized_flask_app
mkdir Resources
cd Resources

copy con Notes.txt

copy con .gitignore
	__pycache__
	.venv
	db 

pyenv version
pyenv local 3.10.11

python -m venv .venv
.venv\Scripts\activate

git init
git add .
git commit -m "Initial commit with notes and pyenv set"

==============================================================
Installing Flask and Flask-SQLAlchemy:
--------------------------------------
>> pip install Flask Flask-SQLAlchemy
	Successfully installed Flask-2.3.2 Flask-SQLAlchemy-3.0.5 Jinja2-3.1.2 MarkupSafe-2.1.3 Werkzeug-2.3.6 blinker-1.6.2 click-8.1.6 colorama-0.4.6 greenlet-2.0.2 itsdangerous-2.1.2 sqlalchemy-2.0.19 typing-extensions-4.7.1
	
==============================================================
Creating a Configuration File:
------------------------------

- create config.py file to create Config Class to set values from environment variable or default.
- ActivatedConsole.bat file created for using activated venv with default env variables.

==============================================================
Creating a Flask Application Factory:
-------------------------------------

app\__init__.py is created with create_app() method.

env for FLASK_APP=app and FLASK_ENV=development is set.

flask run

==============================================================
Creating Flask Blueprints:
--------------------------

app\main\__init__.py created for "bp = Blueprint('main', __name__)"
app\main\routes.py created for defining routes with @bp.route('/')

app\__init__.py registers the created blueprint with its routes.
    from app.main import bp as main_bp
    app.register_blueprint(main_bp)

Notes: 
- putting 'from app.main import routes' above "bp= BluePrint()" will cause circular import exception.

==============================================================
Rendering with Templates:
-------------------------

imported render_template from flask. and returned rendered index.html

index.html is defined in app\templates\index.html which uses base.html inside with "title block" and "content block"

==============================================================
Adding SQLAlchemy models to your flask application:
---------------------------------------------------

- created extensions.py to create SQLAlchemy instance
- initialized flask extension with db.init_app(app)


>> flask shell
	Python 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)] on win32
	App: app
	Instance: D:\Work\Project - Image Detection\organized_flask_app\instance
	>>> from app.extensions import db
	>>> print (db)
	<SQLAlchemy sqlite:///D:\Work\Project - Image Detection\organized_flask_app\instance\organized_flask_app.db>
==============================================================
Creating and Interacting with the Post Model:
---------------------------------------------

- created models folder for defining Post model.
- used "flask shell" to import post model, create table and seed with random posts

	from app.extensions import db
	from app.models.post import Post
	
	db.drop_all() -- optional
	db.create_all()

	import random
	for i in range(0, 10):
		random_num = random.randrange(1, 1000)
		post = Post(title=f'Post #{random_num}',
					content=f'Content #{random_num}')
		db.session.add(post)
		print(post)
		print(post.content)
		print('--')
		db.session.commit()
- updated posts index page to show all the posts created

==============================================================
Creating and Interacting with the Question Model:
-------------------------------------------------

- created Question model
- used "flask shell" to seed questions
	from app.extensions import db
	from app.models.question import Question
	db.create_all()

	q1 = Question(content='Why is the sky blue?', answer='Because... Why not?')
	q2 = Question(content='What is love?', answer='A portal to the underworld.')
	db.session.add_all([q1, q2])
	db.session.commit()

- updated questions index page to show all the questions created, and a form to make POST request to upload question and answer. (but 405 error at this stage)
==============================================================
- To change the default method name (create_app) of flask app instance, set FLASK_APP=app:create__custom_app.

==============================================================